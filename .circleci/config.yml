# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.2-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
       - image: circleci/mysql:8.0.2
         environment:
           MYSQL_USER: 'root'
           MYSQL_ROOT_PASSWORD: 'root'
           MYSQL_ROOT_HOST: '%'

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: mv config/database.yml.ci config/database.yml
      - run: bundle exec rake db:create db:schema:load RAILS_ENV=test --trace

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results

            bundle exec rspec spec/ --format progress \
                            --out ./tmp/test-results/rspec.xml \
                            --format progress \

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  frontend-build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.8.1
    steps:
      - checkout
      - run:
          name: Install test dependencies
          command: |
            cd frontend
            yarn install --frozen-lockfile --prefer-offline
      - run:
          name: yarn test
          command: |
            cd frontend
            yarn build

  frontend-test:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.8.1-browsers
    steps:
      - checkout
      - run:
          name: Install Language Pack(Japanese) and set locale
          command: |
            sudo ln -fs /usr/share/zoneinfo/Asia/Tokyo /etc/localtime &&
            sudo dpkg-reconfigure -f noninteractive tzdata
            sudo apt -qqy upgrade
            sudo apt -qqy --no-install-recommends install -y locales-all &&
            sudo locale-gen ja_JP.UTF-8 &&
            sudo update-locale LANG=ja_JP.UTF-8 &&
            sudo update-locale LANGUAGE="ja_JP:ja"
            sudo apt -qqy --no-install-recommends install -y fonts-takao-gothic fonts-takao-mincho &&
            sudo dpkg-reconfigure --frontend noninteractive locales &&
            sudo fc-cache -fv
            locale -a | grep ja_JP
            cat /etc/default/locale
            sudo apt -qyy autoremove &&
            sudo apt -qyy clean &&
            sudo rm -rf /var/lib/apt/lists/*

      - run:
          name: Install test dependencies
          command: |
            cd frontend
            yarn install --frozen-lockfile --prefer-offline
      - run:
          name: yarn storybook:build
          command: |
            cd frontend
            yarn storybook:build
      - run:
          name: yarn test
          command: |
            cd frontend
            yarn test

  info:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12.8.1-browsers
    steps:
      - checkout
      - run: |
          # TimezoneをAsia/Tokyoへ変更する
          sudo ln -fs /usr/share/zoneinfo/Asia/Tokyo /etc/localtime &&
          sudo dpkg-reconfigure -f noninteractive tzdata
      - run: |
          # インストール済みのパッケージ一覧を表示する #1
          dpkg -l
      - run: |
          # インストール済みのパッケージ一覧を表示する #2
          apt list | grep installed
      - run: |
          # アップグレード可能なパッケージ一覧を表示する
          apt list --upgradable
      - run: |
          # サポートされているロケール一覧を表示する
          grep '\.UTF-8' /usr/share/i18n/SUPPORTED | awk '{ print $1 }'
      - run: |
          # システム情報を表示する
          uname -a
      - run: |
          # 現在のロケール設定を確認する
          locale -a
      - run: |
          # `update-locale`実行前の状態を確認する
          cat /etc/default/locale
      - run: |
          # パッケージを更新する
          sudo apt -qqy upgrade
      - run: |
          # 全てのlanugage-packをインストールする
          # language-pack-ja単体だと何故か失敗する…
          sudo apt -qqy --no-install-recommends install -y locales-all &&
          sudo locale-gen ja_JP.UTF-8 &&
          sudo update-locale LANG=ja_JP.UTF-8 &&
          sudo update-locale LANGUAGE="ja_JP:ja"
      - run: |
          # 日本語フォントをインストールする
          sudo apt -qqy --no-install-recommends install -y fonts-takao-gothic fonts-takao-mincho &&
          sudo dpkg-reconfigure --frontend noninteractive locales &&
          sudo fc-cache -fv
      - run: |
          # 更新されたロケール設定を確認する
          locale -a | grep ja_JP
      - run: |
          # `update-locale`実行後の状態を確認する
          cat /etc/default/locale
      - run: |
          # 不要なパッケージやキャッシュを削除する
          sudo apt -qyy autoremove &&
          sudo apt -qyy clean &&
          sudo rm -rf /var/lib/apt/lists/*

workflows:
  version: 2
  main:
    jobs:
      - build
      - frontend-build
      - frontend-test
      - info
